
doctype html
html(lang="en")
  head
    title 24 hours of game dev in Rust
    link(rel="stylesheet" href="css/reveal.css")
    link(rel="stylesheet" href="css/theme/black.css")
    link(rel="stylesheet" href="css/highlight.min.css")
    script(src="js/classList.js")
    script(src="js/head.min.js")
    script(src="js/html5shiv.js")
    script(src="js/reveal.js")
  body
    div.reveal
      div.slides
        section
          h2 24 hours of game dev in Rust
        section
          h2 Me
          ul
            li Michael Shaw
            li Years of developing games in Scala
            li 24 hours of Rust experience
        section
          h2 Cheating
          p I read this beforehand
          a(href="https://doc.rust-lang.org/book/") https://doc.rust-lang.org/book/
        section
          h1 24:00
          h2 Thievery and triangles
        section
          h3 Glium
          ul
            li OpenGL wrapper, without the state
            li Forget about glEnable/glDisable/glBind/glUnbind ...
            li Don't look at the issues count on github, everything is fine
          pre
            code.data-trim.data-no-escape.
              target.draw(
                &amp;vertex_buffer,
                &amp;index_buffer,
                &amp;program,
                &amp;uniforms,
                &amp;Default::default()
              ).unwrap();
        section
          h3 Mac OS X Notes
          p Demand a core profile
          pre
            code.data-trim.data-no-escape.
               let display = WindowBuilder::new()
                 .with_gl_profile(GlProfile::Core)
                 .with_gl(GlRequest::Specific(Api::OpenGl,(4,0)))
                 .build_glium().unwrap();
          p Make your shaders 3.3+
          pre
            code.data-trim.data-no-escape.
              #version 330
        section
          p Glium examples are really easy to run (steal them)
          pre
            code.data-trim.data-no-escape.
              cargo run --example tutorial-14
          p Dump input to the console so you can get used to them
          pre
            code.data-trim.data-no-escape.
              for event in display.poll_events() {
                match event {
                  glutin::Event::Closed =&gt; return support::Action::Stop,
                  e =&gt; println!("got {:?}", e)
                }
              }
        section
          h1 23:00
          h3(style="text-decoration: line-through;") An ounce of organisation
          h3 Paying the piper
        section
          p An hour spent learning Rust's module system
          p You know what I said about stealing everything ...
          p Throw that out and start from scratch
          p Add it back in line by line
          code.data-trim.data-no-escape.
           lib.rs
          pre
            code.data-trim.data-no-escape.
              #![crate_name="gm2"]
              #![allow(dead_code)]
              \#[macro_use]
              extern crate glium;

              pub mod core {
                pub mod camera;
                pub mod render;
                pub mod shader;
                pub mod game;
              }
              pub mod game;
              pub mod input;

        section
          h1 22:00
          h3(style="text-decoration: line-through;") An ounce of organisation
          h3 Piper needs a brand new car
        section
          p An hour spent battling glium Types
          pre
            code.data-trim.data-no-escape.
              pub fn build_window() -&gt;
                glium::backend::glutin_backend::GlutinFacade

              pub fn render_state&lt;F&gt;(display: &amp;F) -&gt; RenderState
                where F : glium::backend::Facade

              pub fn render(
                display: &amp;glium::Display,
                rs:&amp;RenderState,
                color: [f32; 4]
              )
        section
          p Neat macro vertex buffer example
        section
          h1 21:00
          p Textured Quads
        section
          h3 Texture Arrays are your friend
          p Texture array example with Image
        section
          h3 Quads
          p Quads are easy
          p Build a quad tesselator
        section
          p Fat Vertices
          pre
            code.data-trim.data-no-escape.
              \#[derive(Copy, Clone)]
              pub struct PTCVertex {
                  pub position: [f32; 3],
                  pub tex_coord: [f32; 3],
                  pub color: [f32; 4],
                  pub normal: [f32; 3],
              }
          p Our Shader (GLSL)
          pre
            code.data-trim.data-no-escape.
              void main() {
                vec4 tColour = texture(u_texture_array, vTexCoord);
                f_color = tColour * vColor * u_color;
              }
        section
          h1 20:00
          h3 Generating geometry
        section
          p [Diagram of camera at 45 degrees]
          p [Walls and floors]
        section
          h1 18:00
          h3 Cameras and tiles
        section
          p [example of cameras and tiles]
          p adding discard
          p blending and depth
        section
          h1 16:00
          p Examples be damned
          p Example shader had matrix multiplication around the wrong way
          p Spent an hour debugging my working camera functions
        section
          h3 Static Normals and rotating sun
        section
          h1 15:00
        section
          p Input Handling
          p Ray Picking
        section
          h1 12:00
        section
          p Organisation?
        section
          h1 XYZ
          h3 Organisation &amp; Inefficiency
          img(src="img/value.types.jpg")
        section
          p
            code.data-trim.data-no-escape.
              \#[derive(Clone,Copy,Debug,Eq,PartialEq)]
          p &nbsp;
          p Simple &amp; Inefficient &lt;3
          p -or-
          p Why borrow when you can copy? (don't answer that)
          p &nbsp;
          p Disclaimer: This is not idiomatic Rust, these are the fever dreams of a Scala developer who's never been allowed to stack allocate before.
        section
          h2 Seperate all the things
          ul
            li Window Management
            li Game State
            li Input Handling
            li Game Update
            li Render
        section
          h2 Window Management
        section
          h2 Game State
        section
          h2 Input Handling
          p Event Types, Sequence
          p Translate
        section
          h2 Render
          p Render State




    script(type='text/javascript').
       Reveal.initialize({
          controls: false,
          slideNumber: true,
          history: true,
          progress: true,
          dependencies: [
            { src: 'js/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }
          ]
       });

