
doctype html
html(lang="en")
  head
    title 24 hours of game dev in Rust
    link(rel="stylesheet" href="css/reveal.css")
    link(rel="stylesheet" href="css/theme/black.css")
    link(rel="stylesheet" href="css/highlight.min.css")
    script(src="js/classList.js")
    script(src="js/head.min.js")
    script(src="js/html5shiv.js")
    script(src="js/reveal.js")
  body
    div.reveal
      div.slides
        section
          h2 24 hours of game dev in Rust
          p A self imposed game jam trip report
        section
          h2 Me
          ul
            li Michael Shaw
            li Years of developing games in Scala
            li 24 hours of Rust experience
        section
          p Glium &amp; Glutin overview
          p Game jam style engine design
          p A smidge of game design
          p Building a tiny game
        section
          h2 Cheating
          p I read this beforehand
          a(href="https://doc.rust-lang.org/book/") https://doc.rust-lang.org/book/
        section
          p.big_numbers 24:00
          h3 Thievery and triangles
        section
          h3 Glium
          a(href="https://github.com/tomaka/glium") https://github.com/tomaka/glium
          p Safe OpenGL without the state machine.
          ul
            li Forget about glEnable/glDisable/glBind/glUnbind ...
            li Don't look at the issues count on github, everything is fine
          pre
            code.data-trim.data-no-escape.
              target.draw(
                &amp;vertex_buffer,
                &amp;index_buffer,
                &amp;program,
                &amp;uniforms,
                &amp;Default::default()
              ).unwrap();
        section
          h3 Target
          pre
            code.data-trim.data-no-escape.cd_highlight.
              <span class='cd_highlight'>target</span>.draw(
                &amp;vertex_buffer,
                &amp;index_buffer,
                &amp;program,
                &amp;uniforms,
                &amp;Default::default()
              ).unwrap();
          p What we're drawing on (window, or off screen)
          img(src="img/blank.window.png" height=350)
        section
          h3 vertex_buffer
          pre
            code.data-trim.data-no-escape.cd_highlight.
              target.draw(
                &amp;<span class="cd_highlight">vertex_buffer</span>,
                &amp;index_buffer,
                &amp;program,
                &amp;uniforms,
                &amp;Default::default()
              ).unwrap();
          p Vertices that we want to draw (usually triangles)
          img(src="img/vertices.png" style='background-color:white;' height=200)
        section
          h3 program
          pre
            code.data-trim.data-no-escape.cd_highlight.
              target.draw(
                &amp;vertex_buffer,
                &amp;index_buffer,
                &amp;<span class="cd_highlight">program</span>,
                &amp;uniforms,
                &amp;Default::default()
              ).unwrap();
          p A pair of GLSL programs/"shaders"<br>Vertices + Uniforms in -&gt; Coloured pixels out
          pre
            code.data-trim.data-no-escape.cd_highlight.
              void main() {
                gl_Position = matrix * vec4(position, 1.0);
                v_color = color * u_color;
                v_tex_coord = tex_coord;
                v_normal = normal;
              }
        section
          h3 uniforms
          pre
            code.data-trim.data-no-escape.cd_highlight.
              target.draw(
                &amp;vertex_buffer,
                &amp;index_buffer,
                &amp;program,
                &amp;<span class="cd_highlight">uniforms</span>,
                &amp;Default::default()
              ).unwrap();
          p Shader program state <br />(textures, colors, camera transforms)
          pre
            code.data-trim.data-no-escape.cd_highlight.
              let uniforms = uniform! {
                matrix: mvp_raw,
                u_texture_array: texture,
                u_color: color,
                u_alpha_minimum: 0.05_f32,
                u_sun_direction: adjusted_sun_direction_raw,
              };
          p Pretend the (!) isn't there and that it's just a struct.
        section
          p That ! is saving you from the 24 years of OpenGL's legacy
          img(src="img/opengl.gif")
          p Anytime you see a ! you're exchanging a few hours of runtime trial and error for a runtime error on program start
        section
          p Uniforms
          pre
            code.data-trim.data-no-escape.cd_highlight.
              glGetUniformLocation(id,u.name)

              glActiveTexture(GL_TEXTURE0 + n)
              glBindTexture(tu.target, 0)

              glUniformMatrix4(id, matrix)

          p Shaders
          pre
            code.data-trim.data-no-escape.cd_highlight.
              glBindAttribLocation(id, n, a.name)

              glVertexAttribPointer(n, a.components, a.componentType.glCode,
                a.normalized, strideBytes, at)
              glEnableVertexAttribArray(n)

              glDisableVertexAttribArray(n)
        section
          div
            img(src="img/blank.window.png" height=300)
          p Becomes
          pre.
            thread '&lt;main&gt;' panicked at

            'The program attribute `position` is missing in the vertex bindings',

             /Users/michael/.cargo/registry/src/github.com-1ecc6299db9ec823/
                  glium-0.15.0/src/vertex_array_object.rs:287

            note: Run with `RUST_BACKTRACE=1` for a backtrace.
        section
          h3 Mac OS X Notes
          p Demand a core profile
          pre
            code.data-trim.data-no-escape.
               let display = WindowBuilder::new()
                 .with_gl_profile(GlProfile::Core)
                 .with_gl(GlRequest::Specific(Api::OpenGl,(4,0)))
                 .build_glium().unwrap();
          p Make your shaders 3.3+
          pre
            code.data-trim.data-no-escape.
              #version 330
        section
          p Glium examples are really easy to run (steal them)
          pre
            code.data-trim.data-no-escape.
              cargo run --example tutorial-14
          p Print input events to get familiar
          pre
            code.data-trim.data-no-escape.
              for event in display.poll_events() {
                match event {
                  glutin::Event::Closed =&gt; return support::Action::Stop,
                  e =&gt; println!("got {:?}", e)
                }
              }
        section
          h3 Glutin
          a(href="https://github.com/tomaka/glutin") https://github.com/tomaka/glutin
          p Cross platform:
          ul
            li Window Creation
            li Input Events
            li OpenGL Context Creation
        section
          p.big_numbers 23:00
          h3(style="text-decoration: line-through;") An ounce of organisation
          h3 Paying the piper
        section
          p An hour spent learning Rust's module system
          p You know what I said about stealing everything ...
          p Throw it out and add it back line by line ...
          code.data-trim.data-no-escape.
           lib.rs
          pre
            code.data-trim.data-no-escape.
              #![crate_name="gm2"]
              #![allow(dead_code)]

              \#[macro_use]
              extern crate glium;

              pub mod core {
                pub mod camera;
                pub mod render;
                pub mod shader;
                pub mod game;
              }
              pub mod game;
              pub mod input;
        section
          h3 Forget everything you know about namespacing from managed languages
          p <span class='h_highlight'>mod</span>ule directives form a tree
          p Named pointers, not namespaces
          p Feels like namespaces + include directives
        section
          p.less_big_numbers 22:00
          h5(style="text-decoration: line-through;") An ounce of organisation
          h3 Piper needs a brand new car
          img(src="img/cadillac.jpg" height=400)
        section
          p An hour spent battling glium Types
          pre
            code.data-trim.data-no-escape.
              pub fn build_window() -&gt;
                glium::backend::glutin_backend::GlutinFacade
          p All the examples are one function, so there's no examples of:
          pre
            code.data-trim.data-no-escape.
              pub fn render(display: &amp;glium::Display, rs:&amp;RenderState)
          p I'm pretty sure I shouldn't be passing around a GlutinFacade.
        section
          p An hour later I find ...
          pre
            code.data-trim.data-no-escape.
              pub use backend::glutin_backend::GlutinFacade as Display;
          p Because I'm new at Rust :-/
        section
          p.big_numbers 21:00
          h3 Game jam style rendering
        section
          h3 Quick &amp; Dirty
          p 2D sprites positioned in 3D (more than Z order)
          p Quads only, in one vertex format
          p At most a few batches per frame
          p Dev performance, not machine performance
        section
          h3 One fat vertex format
          pre
            code.data-trim.data-no-escape.
              \#[derive(Copy, Clone)]
              pub struct PTCNVertex {
                  pub position: [f32; 3],
                  pub tex_coord: [f32; 3],
                  pub color: [f32; 4],
                  pub normal: [f32; 3],
              }

              implement_vertex!(PTCNVertex, position, tex_coord, color, normal);
          p "color" allows us to flash guys white if they get hit<br>or red if they're hurt
          p "normal" allows us to do add lighting if we have time
        section
           pre
            code.data-trim.data-no-escape.
              glium::VertexBuffer::new(display,
                &amp;[
                  PTCNVertex { position: [-0.5, -0.5, 0.0], tex_coord: [1.0, 0.0, 1.0],
                      color:    [0.0, 1.0,  0.0,  1.0], normal:    [0.0, 1.0, 0.0] },
                  PTCNVertex { position: [0.0,  0.5,  0.0], tex_coord: [1.0, 0.0, 1.0],
                      color:    [0.0, 0.0,  1.0,  1.0], normal:    [0.0, 1.0, 0.0] },
                  PTCNVertex { position: [0.5,  -0.5, 0.0], tex_coord: [1.0, 0.0, 1.0],
                      color:    [1.0, 0.0,  0.0,  1.0], normal:    [0.0, 1.0, 0.0] },
                ]
              ).unwrap()
        section
          h3 Texture Arrays are your friend
          img(src="img/texture_array.png" style='float:right;margin-left:100px' width=300 height=600 )
          p(style="margin-top:60px;") Great for sprites
          p(style="margin-top:60px;") Run out of space?
          p Add another layer
          p(style="margin-top:60px;") Different sides/factions?
          p Add layers with recoloured versions
        section
          h3 image
          a(href="https://github.com/PistonDevelopers/image") https://github.com/PistonDevelopers/image
          p The last image library you'll need
          pre
            code.data-trim.data-no-escape.
              let image = image::open(&amp;Path::new("img/tiles.png")).unwrap().to_rgba();
              let image_dimensions = image.dimensions();

              let image_raw = texture::RawImage2d::from_raw_rgba_reversed(
                image.into_raw(),
                image_dimensions
              );

              let texture_array = texture::Texture2dArray::new(
                display,
                vec![image_raw]
              ).unwrap();
        section
          h3 Getting Quads back
          img(src="img/quad.jpg")
          p OpenGL doesn't have quads
          p We can just duplicate bottom-left and top-right vertices
        section
          h3 Efficient* Quads
          pre
            code.data-trim.data-no-escape.
              pub struct QuadTesselator&lt;T&gt; {
                vertices: Vec&lt;T&gt;,
              }

              impl&lt;T : Copy&gt; QuadTesselator&lt;T&gt; {
                pub fn add_quad(&amp;mut self, ts:[T; 4]) {
                  for ele in ts.iter() {
                    self.vertices.push(*ele);
                  }
                  self.vertices.push(ts[0]);
                  self.vertices.push(ts[2]);
                }
              }
          p *Developer efficient, embrace #Derive(Copy)
        section
          p.big_numbers 20:00
          h3 Generating geometry: Walls and Floors
        section
          img(src="img/camera.png" height=700)
        section
          iframe(width="856" height="660" src="https://www.youtube.com/embed/PmdodO7o3bg" frameborder="0" allowfullscreen)
        section
          iframe(width="856" height="660" src="https://www.youtube.com/embed/THaHW_rdAhU" frameborder="0" allowfullscreen)
        section
          h3 Base Anchored Wall
          img(src="img/walls.png" height=460)
          p "Smart" quad tesselator understands desired pixel scale and texture sizes to give consistent pixel density
        section
          h3 Rendering becomes
          pre
            code.data-trim.data-no-escape.
              for x in 0..16 {
                for z in 0..16 {
                  tesselator.draw_floor_tile(&amp;ground_tile, 0,
                        x as f64, 0.0, z as f64, 0.0, false);
                }
              }

              tesselator.draw_wall_base_anchored_at(&amp;man, 0,
                        Vec3::new(1.5, 0.0, 1.5), 0.0, false);
              tesselator.draw_floor_centre_anchored_at(&amp;man_shadow, 0,
                        Vec3::new(1.5, 0.0, 1.5), 0.01, false);
              if let &amp;Some(its) = intersection {
                let x = round_down(its.x);
                let z = round_down(its.z);
                tesselator.draw_floor_tile(&amp;indicator, 0,
                        x as f64, 0.0, z as f64, 0.02, false);
              }
        section
          p.big_numbers 18:00
          h3 Cameras and Tiles
        section
          h3 cgmath
          a(href="https://github.com/brendanzab/cgmath") https://github.com/brendanzab/cgmath
          p All the vecs, mats, dots, crosses and inverts you need for a game
        section
          h3 Pixel Perfect Camera
          pre
            code.data-trim.data-no-escape.
              pub fn projection(zoom:f64,
                                width:u32,
                                height:u32,
                                pixels_per_unit: f64) -&gt; Mat4 {

                let effective_width = (width as f64) / (zoom * pixels_per_unit);
                let effective_height = (height as f64) / (zoom * pixels_per_unit)
                                                       / (2.0_f64).sqrt();
                let half_width = effective_width / 2.0;
                let half_height = effective_height / 2.0;

                cgmath::ortho(-half_width, half_width,
                  -half_height, half_height,
                  -100.0, 100.0
                )
              }
        section
          h3 Blending &amp; Depth
          pre
            code.data-trim.data-no-escape.
              let draw_parameters = glium::DrawParameters {
                 depth: glium::Depth {
                     test: glium::draw_parameters::DepthTest::IfLess,
                     write: true,
                     .. Default::default()
                 },
                 blend: glium::Blend::alpha_blending(),
                 .. Default::default()
              };
        section
          p.big_numbers 16:00
          h3 Everything's wrong and I hate the world
        section
          p Assumed my camera creation was wrong, and spent an hour debugging it
          p &nbsp;
          p Example shader had matrix multiplication reversed
          pre
            code.data-trim.data-no-escape.
              <span style="text-decoration: line-through;">gl_Position = vec4(position, 1.0) * matrix;</span>

              gl_Position = matrix * vec4(position, 1.0);
        section
          p.big_numbers 15:00
          h3 Interaction
        section
          h3 Input Handling
          pre
            code.data-trim.data-no-escape.
              \#[derive(Clone, Debug, Eq, PartialEq)]
              pub struct KeyState {
                pub down: HashSet&lt;glutin::VirtualKeyCode&gt;,
                pub pushed: HashSet&lt;glutin::VirtualKeyCode&gt;, // pushed this frame
                pub released: HashSet&lt;glutin::VirtualKeyCode&gt;, // released this frame
              }

              \#[derive(Clone, Debug, Eq, PartialEq)]
              pub struct InputState {
                pub mouse:MouseState,
                pub keys:KeyState,
              }

              pub fn produce(input:&amp;InputState, events: &amp;Vec&lt;glutin::Event&gt;)
                  -&gt; InputState
          p We need to remember a few things between frames
        section
          h3 Mouse Picking
          p From windowed mouse coordinates to world objects
          pre
            code.data-trim.data-no-escape.
              pub fn ray_for_mouse_position(&amp;self, x:i32, y:i32)
                  -&gt; Option&lt;camera::Line&gt;

              \#[derive(PartialEq, Debug, Copy, Clone)]
              pub struct Line {
                pub from: Vec3,
                pub to: Vec3,
              }

              impl Line {
                pub fn intersects(&amp;self, plane:Plane) -&gt; Option&lt;Vec3&gt;
          p In our main loop
          pre
            code.data-trim.data-no-escape.
              let new_input_state = input::produce(&amp;input_state, &amp;evs);
              let (mouse_x, mouse_y) = input_state.mouse.at;
              let line = render_state.ray_for_mouse_position(mouse_x, mouse_y);
              intersection = line.and_then(|l| l.intersects(ground_plane) );
        section
          p.big_numbers 12:00
          h3 Hey, you said there'd be games you lying bastard ...
        section
          h3 Game in 12 hours anyone?
        section
          h3 Set your expectations low
        section
          h3 No, lower than that, like real low
        section
          h3 Think
          img(src="img/nms.jpg" height=460)
        section
          div
            img(src="img/16x16.tiles.large.png" height=400)
          div
            p Tile laying<br />&amp;<br />Mountain climbing
        section
          h3 Grom, The Mountain God
          img(src="img/stone.head.jpg" height=500)
          p Good? Evil? You're the big stone head
        section
          h3 Get the chosen one to the mountain top
          img(src="img/grom.mockup.jpg" height=400)
          p &gt; 1 You Lose ... &lt; 1 You Lose
          p Who's the chosen one?
          p Clearly the guy that made it
        section
          img(src="img/tiles.sketch.png" height=660)
        section
          p.big_numbers 11:45
          h3 State &amp; Game Loops
        section
          h3 Organisation &amp; Inefficiency
          img(src="img/value.types.jpg")
        section
          p
            code.data-trim.data-no-escape.
              \#[derive(Clone,Copy,Debug,Eq,PartialEq)]
          p &nbsp;
          p Simple &amp; Inefficient &lt;3
          p -or-
          p Why borrow when you can copy?
          p &nbsp;
          h3 Disclaimer
          p This is not idiomatic Rust, these are the fever dreams of a Scala developer who can't even remember what life is like without a garbage collector.
        section
          h2 Seperate all the things
          ul
            li Game State
            li Input Handling
            li Game Update
            li Render
            li Game Loop

    script(type='text/javascript').
       Reveal.initialize({
          controls: false,
          slideNumber: true,
          history: true,
          progress: true,
          dependencies: [
            { src: 'js/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }
          ]
       });

